<template>
  <view class="custom-camera-container">
    <KJ-Camera
      :ref="cameraRef"
      class="KJ-Camera"
      :style="{width:'100%',height:'500rpx'}"
    >
    </KJ-Camera>
    <view class="btn-view">
            <button @click="captureImage" class="btn" type="primary">
                拍照
            </button>
            <button @click="startVideoCapture" class="btn" type="primary">
                开始录像
            </button>
            <button @click="stopVideoCapture" class="btn" type="primary">
                停止录像
            </button>
            <button @click="switchCamera" class="btn" type="primary">
                前后摄像头切换
            </button>
            <button @click="setZoomFactor" class="btn" type="primary">
                设置焦距
            </button>
            <button @click="setFlash" class="btn" type="primary">
                设置闪光灯模式
            </button>
            <button @click="setTorch" class="btn" type="primary">
                设置手电筒
            </button>
            <button @click="ios_getSessionPresets" class="btn" type="primary">
                ios获取支持的分辨率
            </button>
            <button @click="ios_setSessionPreset" class="btn" type="primary">
                ios设置分辨率
            </button>
            <button @click="android_getCameras" class="btn" type="primary">
                andorid 获取摄像头
            </button>
            <button @click="android_getSupportedPictureSizes" class="btn" type="primary">
                android获取照片支持分辨率列表
            </button>
            <button @click="android_getSupportedPreviewSizes" class="btn" type="primary">
                android获取预览支持分辨率列表
            </button>
            <button @click="android_getSupportedVideoSizes" class="btn" type="primary">
                android获取视频支持分辨率列表
            </button>
            <button @click="android_setCameraParams" class="btn" type="primary">
                android设置相机参数
            </button>
            <button @click="setRotation" class="btn" type="primary">
                android设置旋转角度
            </button>
            <button @click="initCamera" class="btn" type="primary">
                初始化相机
            </button>
            <button @click="setFPS" class="btn" type="primary">
                ios设置fps，慢动作视频
            </button>
            <button @click="setAutoFPS" class="btn" type="primary">
                ios设置自动FPS
            </button>
            <image :src="src" style="width: 50px;height: 50px;"></image>
        </view>
  </view>
</template>

<script lang="ts" setup>
import { ref } from "vue";
import type {CameraInsType} from '@/types/nativeCameraRefType'
var videoFilePath: string; // 视频文件路径
const src = ref("");
const isShow = ref(false); // //解决刚打开页面卡顿的情况
const windowHeight = ref(0);
const windowWidth = ref(0);
const isVolume = ref(false);
const cameraRef = ref<CameraInsType | null>(null); // 相机示例
// 初始化相机，默认加载时已经初始化，该方法用于在旋转相机时使用，用于重置相机
const initCamera = () => {
  cameraRef.value!.initCamera();
};
// 拍照
const captureImage = () => {
  const dic = {
    savePath: plus.io.convertLocalFileSystemURL("_doc/KJ-Camera"), //保存图片位置，一定要是_doc绝对路径
    format: "jpeg", //保存的图片格式 有效值：png、jpeg
    quality: 80, //andorid才可用 保存的图片质量，取值1-100
    timeInterval: 0, //如果遇到黑照片，可以延时拍照，经过测试，已经没有黑照片，可以不用延时
  };
  cameraRef.value!.captureImage(
    dic,
    (res) => {
      console.log("filePath: " + res);
      //_this.src = "file://" + res.filePath;
      uni.saveImageToPhotosAlbum({
        filePath: plus.io.convertAbsoluteFileSystem(res.filePath),
        success: function () {
          console.log("save success");
        },
        fail: function (e) {
          console.log(JSON.stringify(e));
        },
      });
    },
    (res) => {
      src.value = "data:image/png;base64," + res.base64;
      console.log("base64: " + res);
    }
  );
};

// 开始录像
const startVideoCapture = () => {
  /**
   * 注意：videoEncoder和audioEncoder最好设置为0，要不有些手机不支持，就录制不知了
   * */
  var _this = this;
  var dic = {
    savePath: plus.io.convertLocalFileSystemURL("_doc/KJ-Camera"), //保存视频位置，一定要是_doc绝对路径
    isAddAudio: true, //是否添加音频，默认是true
    videoEncoder: 2, //andorid有效,视频编码,DEFAULT = 0;H263 = 1;H264 = 2;MPEG_4_SP = 3;VP8 = 4;HEVC = 5;
    audioEncoder: 3, //andorid有效,音频编码,DEFAULT = 0;AMR_NB = 1;AMR_WB = 2;AAC = 3;HE_AAC = 4;AAC_ELD = 5;VORBIS = 6;
    timeInterval: 0, //如果遇到首帧有暗视频，可以延时拍照，经过测试，已经没有首帧有暗视频，可以不用延时
  };
  cameraRef.value!.startVideoCapture(dic, (res) => {
    console.log("startVideoCapture: " + JSON.stringify(res));
    if (res.status == "start") {
      console.log("开始录像");
    } else if (res.status == "end") {
      console.log("结束录像");
      videoFilePath = res.filePath;
      uni.saveVideoToPhotosAlbum({
        filePath: plus.io.convertAbsoluteFileSystem(videoFilePath),
        success: function () {
          console.log("save success");
        },
      });
    }
  });
};
// 停止录像
const stopVideoCapture = () => {
  cameraRef.value!.stopVideoCapture();
};
const android_getCameras = () => {
  cameraRef.value!.android_getCameras((res) => {
    console.log("android_getCameras：" + JSON.stringify(res));
  });
};
// 前后摄像头切换
const switchCamera = () => {
  cameraRef.value!.switchCamera({
    //cameraId: 1 //andoird有效，通过android_getCameras获取，不填写，默认前后摄像头切换
  });
  android_setCameraParams(); //因为andorid前后摄像头，设置相机参数不一样，需要重置
};
// 设置焦距
const setZoomFactor = () => {
  cameraRef.value!.getZoomFactor((res_zoom) => {
    console.log("获取当前焦距：" + res_zoom.value);
    cameraRef.value!.getMaxZoomFactor((res_max) => {
      console.log("可设置的最大焦距：" + res_max.value);
      cameraRef.value!.getMinZoomFactor((res_min) => {
        console.log("可设置的最小焦距：" + res_min.value);
        cameraRef.value!.setZoomFactor(res_max.value);
      });
    });
  });
};
// 设置闪光灯
const setFlash = () => {
  cameraRef.value!.setFlash("off");
};
// 设置手电筒
const setTorch = () => {
  cameraRef.value!.setTorch("on");
};

// ios获取支持的分辨率
const ios_getSessionPresets = () => {
  cameraRef.value!.ios_getSessionPresets((res) => {
    console.log("ios_getSessionPresets：" + JSON.stringify(res));
  });
};
// ios设置分辨率
const ios_setSessionPreset = () => {
  cameraRef.value!.ios_setSessionPreset("low"); //从ios_getSessionPresets方法获取
};
// 安卓获取照片支持分辨率列表
const android_getSupportedPictureSizes = () => {
  cameraRef.value!.android_getSupportedPictureSizes((res) => {
    console.log("android_getSupportedPictureSizes：" + JSON.stringify(res));
  });
};
// 安卓获取支持预览分辨率列表
const android_getSupportedPreviewSizes = () => {
  cameraRef.value!.android_getSupportedPreviewSizes((res) => {
    console.log("android_getSupportedPreviewSizes：" + JSON.stringify(res));
  });
};
// 安卓获取视频支持分辨率列表
const android_getSupportedVideoSizes = () => {
  cameraRef.value!.android_getSupportedVideoSizes((res) => {
    console.log("android_getSupportedVideoSizes：" + JSON.stringify(res));
  });
};
// 安卓设置旋转角度
const setRotation = () => {
  cameraRef.value!.setRotation(null);
};
// 安卓设置相机参数
const android_setCameraParams = () => {
  const res = uni.getSystemInfoSync();

  var screenBiLi = res.screenWidth / res.screenHeight;
  screenBiLi = Math.floor(screenBiLi * 10) / 10;
  console.log("screenBiLi:" + screenBiLi);

  //设置最大分辨率
  cameraRef.value!.android_getSupportedPictureSizes((PictureSizes) => {
    cameraRef.value!.android_getSupportedPreviewSizes((PreviewSizes) => {
      cameraRef.value!.android_getSupportedVideoSizes((VideoSizes) => {
        var maxPictureSizesIndex = 0;
        var maxPictureSizeWidthHeight = 0;
        for (var i = 0; i < PictureSizes.length; i++) {
          var item = PictureSizes[i];
          var PictureSizeBiLi = item.height / item.width;
          PictureSizeBiLi = Math.floor(PictureSizeBiLi * 10) / 10;
          console.log("PictureSizeBiLi:" + PictureSizeBiLi);
          if (PictureSizeBiLi == screenBiLi) {
            if (maxPictureSizeWidthHeight < item.width * item.height) {
              maxPictureSizeWidthHeight = item.width * item.height;
              maxPictureSizesIndex = i;
            }
          }
        }

        var maxPreviewSizesIndex = 0;
        var maxPreviewSizeWidthHeight = 0;
        for (var i = 0; i < PreviewSizes.length; i++) {
          var item = PreviewSizes[i];
          var PreviewBiLi = item.height / item.width;
          PreviewBiLi = Math.floor(PreviewBiLi * 10) / 10;
          console.log("PreviewBiLi:" + PreviewBiLi);
          if (PreviewBiLi == screenBiLi) {
            if (maxPreviewSizeWidthHeight < item.width * item.height) {
              maxPreviewSizeWidthHeight = item.width * item.height;
              maxPreviewSizesIndex = i;
            }
          }
        }

        var maxVideoSizesIndex = 0;
        var maxVideoSizesWidthHeight = 0;
        for (var i = 0; i < VideoSizes.length; i++) {
          var item = VideoSizes[i];
          var PreviewBiLi = item.height / item.width;
          PreviewBiLi = Math.floor(PreviewBiLi * 10) / 10;
          console.log("PreviewBiLi:" + PreviewBiLi);
          if (PreviewBiLi == screenBiLi) {
            if (maxVideoSizesWidthHeight < item.width * item.height) {
              maxVideoSizesWidthHeight = item.width * item.height;
              maxVideoSizesIndex = i;
            }
          }
        }

        const dic = {
          picSizeWidth: PictureSizes[maxPictureSizesIndex].width, //照片分辨率宽 从android_getSupportedPictureSizes方法获取
          picSizeHeight: PictureSizes[maxPictureSizesIndex].height, //照片分辨率高 从android_getSupportedPictureSizes方法获取
          jpegQuality: 100, //照片质量 取值1-100
          preSizeWidth: PreviewSizes[maxPreviewSizesIndex].width, //预览分辨率宽 从android_getSupportedPreviewSizes方法获取
          preSizeHeight: PreviewSizes[maxPreviewSizesIndex].height, //预览分辨率高 从android_getSupportedPreviewSizes方法获取
          videoSizeWidth: VideoSizes[maxVideoSizesIndex].width, //视频分辨率宽 从android_getSupportedVideoSizes方法获取
          videoSizeHeight: VideoSizes[maxVideoSizesIndex].height, //视频分辨率高 从android_getSupportedVideoSizes方法获取
          videoEncodingBitRate:
            5 *
            VideoSizes[maxVideoSizesIndex].width *
            VideoSizes[maxVideoSizesIndex].height, //视频编码比特率，如果设置了视频分辨率，这个一定要设置，否则视频不清晰
        };
        cameraRef.value!.android_setCameraParams(dic);
        console.log(JSON.stringify(dic));
      });
    });
  });
};
const setFPS = () => {
  //注意：慢动作视频，只能在相册里才能看出来效果，其它播放器看不出效果
  cameraRef.value!.setFPS({
    fps: 240, //正常是30
  });
};
const setAutoFPS = () => {
  cameraRef.value!.setAutoFPS();
};
</script>

<style lang="scss" scoped>

</style>
